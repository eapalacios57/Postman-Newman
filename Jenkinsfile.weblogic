def remote = [:]
def commit = ''
def profile = ''
def notifications(String buildStatus = "Inicio La Ejecución Del Pipeline"){
    def JENKINS_FILE = readJSON(text: readFile("./Jenkinsfile.json").trim());
    def channelName = JENKINS_FILE['channelName']
    slackSend(channel:channelName, teamDomain: 'SegurosBolivar', tokenCredentialId: 'jenkins-slack-chanel', color: '#FFFF00', message: "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}: Entorno ${BRANCH_NAME}\n(<${env.BUILD_URL}|Open>)")
}
pipeline {  
    agent any
    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
        disableConcurrentBuilds()
    }
    stages {
        stage('SonarQube analysis') {
           when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
           agent {
                   label 'nodejenkinsjdk11' 
           }      
           steps {
               notifications()
               script {
                   last_stage = env.STAGE_NAME
                   profile = (BRANCH_NAME == "master")? "prod": (BRANCH_NAME == "stage")? "stage": "dev";
                   
                   def SCANNERHOME = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'                  

                    withSonarQubeEnv('SonarQubeCore') {
                        sh """
                                ${SCANNERHOME}/bin/sonar-scanner \
                                    -Dsonar.projectKey=segurosbolivar_simoncotizadores-core-frontend-${profile} \
                                    -Dsonar.projectName=simoncotizadores-core-frontend-${profile} \
                            """
                    }
               }
           }                            
        }
        stage("Quality gate") {
            steps {
                script {
                    // last_stage = env.STAGE_NAME
                    echo "Quality gate"
                }
                // waitForQualityGate abortPipeline: true
            }
        }
        //Setea las variables almacenas en el arhivo .JSON
        stage('Set variables'){
            agent {
                label 'master' 
            }
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            steps{
                script{
                    
                   JENKINS_FILE = readJSON file: 'Jenkinsfile.json';
                   urlWl  = JENKINS_FILE[BRANCH_NAME]['urlWl'];
                   idUserANDPassWl = JENKINS_FILE[BRANCH_NAME]['idUserANDPassWl'];
                   idUserANDPassShh = JENKINS_FILE[BRANCH_NAME]['idUserANDPassShh'];
                   artifactNameWl = JENKINS_FILE[BRANCH_NAME]['artifactNameWl'];
                   domainWl = JENKINS_FILE[BRANCH_NAME]['domainWl'];
                   pathWl = JENKINS_FILE[BRANCH_NAME]['pathWl'];
                   clusterWl = JENKINS_FILE[BRANCH_NAME]['clusterWl'];
                   extension = JENKINS_FILE['extension'];
                   projectName = JENKINS_FILE['projectName'];
                   channelName = JENKINS_FILE['channelName']

                   if( BRANCH_NAME == 'develop'){
                        shutdownCluster =  true //JENKINS_FILE[BRANCH_NAME]['shutdownCluster']
                   } else {
                       shutdownCluster = false
                   }
                    
                   remote.name = projectName
                   remote.host = JENKINS_FILE[BRANCH_NAME]['serverWlSsh']
                   remote.port = JENKINS_FILE[BRANCH_NAME]['puertoWlSsh']
                   remote.allowAnyHosts = true 
                   remote.pty = true
                }
            }
        }

        stage("Build") {
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
            agent {
                label 'maven385java8' 
            }
            steps {
                sh """
                    if [ -f Settings.xml ] ; then rm Settings.xml ; fi
                    
                    echo '<?xml version="1.0" encoding="UTF-8"?>' >> Settings.xml
                    echo '<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd">' >> Settings.xml
                    echo '	<mirrors>' >> Settings.xml
                    echo '		<mirror>' >> Settings.xml
                    echo '			<id>insecure-repo</id>' >> Settings.xml
                    echo '			<mirrorOf>external:http:*</mirrorOf>' >> Settings.xml
                    echo '			<url>http://10.1.0.184:3005/artifactory/simon-maven-repo/</url>' >> Settings.xml
                    echo '			<blocked>false</blocked>' >> Settings.xml
                    echo '		</mirror>' >> Settings.xml
                    echo '	</mirrors>' >> Settings.xml
                    echo '</settings>' >> Settings.xml
                    

                    mvn clean package -P${profile} --settings Settings.xml
                """

                stash includes: "target/${artifactNameWl}.${extension}", name: 'artefact'
            }
        }
        stage('Upload Artifact'){      
            agent {
                label 'master' 
            }
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master'} } 
            steps{
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                        withCredentials([usernamePassword(credentialsId: "${idUserANDPassShh}", passwordVariable: 'password', usernameVariable: 'userName')]) {
                            remote.user = userName
                            remote.password = password
                        }
                        echo "Copy ear to Server Web Logic";
                        unstash 'artefact'
                        sshCommand remote: remote, command: "test -f /home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME} || mkdir -p /home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME}/"
                        sshPut remote: remote, from: "target/${artifactNameWl}.${extension}", into: "/home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME}/"
                        sshCommand remote: remote, command: "chmod 777 /home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}.${extension}"
                    }
                }
            }
            post {
                success {
                    println "Upload Artifact <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    }    
                }
                unstable {
                    println "Upload Artifact <<<<<< unstable >>>>>>"
                    script{
                        statusCode='unstable';
                    }
                }
                failure {
                    println "Upload Artifact <<<<<< failure >>>>>>"
                    script{
                        statusCode='failure';
                        sshCommand remote: remote, sudo: true, command:"rm -rf ${pathwl}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWl}"
                    }
                }
            }
                
        } 
        // stage ("Aprobación GC"){
        //     when { anyOf {  branch 'stage';  branch 'master'  } }
        //     steps{
        //         script{
        //             try {
        //                 timeout(time: 24, unit: 'HOURS'){
        //                 input(message: "Desea autorizar el despliegue?", 
        //                     parameters: [ [$class: 'BooleanParameterDefinition', defaultValue:false, name: 'Aprobar'] ])
        //                 }
        //             }
        //             catch(err){
        //                 echo $err;
        //             }
        //         }
        //     }
        // }
        stage('Stop App'){
            agent {
                label 'master' 
            }
            environment {
                WEBLOGIC_CREDENTIAL = credentials("${idUserANDPassWl}")
            }  
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } } 
            steps{
                script{
                    try{
                        sshCommand remote: remote, command: "cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWl} -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -stop -name $artifactNameWl"
                        statusCodeStop='success';
                    } catch (err) {
                        statusCodeStop='failure';
                        statusCodeUndeploy='failure';   
                        echo "Error al parar la aplicacion"
                    }
                }
            }
            post {
                success {
                    println "Stage Stop App <<<<<< success >>>>>>"
                }
                unstable {
                    println "Stage Stop App <<<<<< unstable >>>>>>"    
                    script{
                        statusCodeStop='unstable';
                        statusCodeUndeploy='failure';
                    }              
                }
                failure {
                    println "Stage Stop App <<<<<< failure >>>>>>"
                    script{
                        statusCodeStop='failure';
                        statusCodeUndeploy='failure';
                    }
                }
            }   
               
        }
        stage('Undeploy'){
           agent {
                label 'master' 
            }
            environment {
                WEBLOGIC_CREDENTIAL = credentials("${idUserANDPassWl}")
            }  
           when { anyOf { branch 'develop'; branch 'stage'; branch 'master'} } 
           steps{
               //Manejo del status code de este stage
                script{
                    echo "Estatus Code Stage Anterior(Stop App): ${statusCodeStop}";
                    if( statusCodeStop == 'success' ){
                        sshCommand remote: remote, command: "cd  ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl $urlWl -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -undeploy -name ${artifactNameWl} -targets ${clusterWl} -usenonexclusivelock -graceful -ignoresessions"
                    } else {
                        ///validar que en el pipe line no salga en verde 
                        echo "Sin artefacto para hacer undeploy"
                    }
                }
            }
            post {
               success {
                    println "Stage Undeploy <<<<<< success >>>>>>"
                    script{
                        if( statusCodeStop == 'success' ){
                            statusCodeUndeploy='success';
                        }else{
                            statusCodeUndeploy='failure';
                        }
                    }
                }
                unstable {
                    script{
                        statusCodeUndeploy='unstable';
                    } 
                    println "Stage Undeploy <<<<<< unstable >>>>>>"
               }
               failure {
                    println "Stage Undeploy <<<<<< failure >>>>>>"   
                    script{
                        if( statusCodeStop == 'success' ){
                            echo "Start App";
                            sshCommand remote: remote, sudo:true, command:"sh ${domainWl}/setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWl} -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -start -name ${artifactNameWl}"
                            
                            autoCancelled = true
                            error('Error al hacer undeploy se inicia de nuevo el artefacto')
                        }    

                        statusCodeUndeploy='failure';
                    }
                }
            }              
        }
        // stage('shutdown cluster'){      
        //     agent {
        //         label 'master' 
        //     }
        //     environment {
        //         WEBLOGIC_CREDENTIAL = credentials("${idUserANDPassWl}")
        //     }  
        //     when { 
        //         branch 'develop'; branch 'stage'
        //         equals expected:true, actual:shutdownCluster 
        //     } 
        //     steps{
        //         sh """
        //             rm -rf shutdown.py
                    
        //             touch shutdown.py
        //             echo 'print("Conección con el servidor ${clusterWl}")' >> shutdown.py 
        //             echo 'connect("${WEBLOGIC_CREDENTIAL_USR}","'${WEBLOGIC_CREDENTIAL_PSW}'","${urlWl}")' >> shutdown.py
        //             echo 'print("shutdown: ${clusterWl}")' >> shutdown.py
        //             echo 'shutdown("${clusterWl}")' >> shutdown.py
        //             echo 'print("state: ${clusterWl}")' >> shutdown.py
        //             echo 'state("${clusterWl}")' >> shutdown.py
        //             echo 'dumpStack()' >> shutdown.py
        //         """

        //         sshPut remote: remote, from: "shutdown.py", into: "/home/devops/applications/${projectName}/DeploysTemp/"

        //         sshCommand remote: remote, command: "cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.WLST  /home/devops/applications/${projectName}/DeploysTemp/shutdown.py"
                
        //         sshCommand remote: remote, command: "rm /home/devops/applications/${projectName}/DeploysTemp/shutdown.py"

        //         sh """
        //             rm -rf shutdown.py
        //         """
        //     }
        // }
        stage('Deploy'){      
            agent {
                label 'master' 
            }
            environment {
                WEBLOGIC_CREDENTIAL = credentials("${idUserANDPassWl}")
            }  
            when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } } 
            steps{
                script{
                    if( (statusCodeStop == 'success' && statusCodeUndeploy == 'success') || statusCodeStop != 'success' ){
                        //sshCommand remote: remote, sudo:true, command:"test -f ${pathWl}/DeploysTemp/${BRANCH_NAME} || sudo mkdir -p ${pathWl}/DeploysTemp/${BRANCH_NAME} && sudo chown -R wlogic12c:oinstall ${pathWl}/"
                        sshCommand remote: remote, command:"rm -rf ${pathWl}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWl}.${extension}"                                
                        sshCommand remote: remote, command:"mv /home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}.${extension} ${pathWl}/DeploysTemp/${BRANCH_NAME}"
                        //sshCommand remote: remote, sudo:true, command:"chown  wlogic12c:oinstall ${pathWl}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}"

                        sshCommand remote: remote, command:"cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWl} -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -deploy -source ${pathWl}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}.${extension} -targets ${clusterWl} -usenonexclusivelock"
                    }
                }
            }
            post {
                success {
                    println "Stage Deploy <<<<<< success >>>>>>"
                    script{
                        statusCode='success';
                    }    

                    echo "backup ";
                    ///validar la existenia de carpetas y de artefacto al cual se le deva crear un backups.
                    //sshCommand remote: remote, sudo: true, command:"test -f ${pathWl}/Deploy/${JOB_BASE_NAME}/ || sudo mkdir -p  ${pathWl}/Deploy/${JOB_BASE_NAME}/ && test -f  ${pathWl}/DeploysHistory/${JOB_BASE_NAME} || sudo mkdir -p  ${pathWl}/DeploysHistory/${JOB_BASE_NAME}"

                    sshCommand remote: remote, command:"test -f ${pathWl}/Deploy/${JOB_BASE_NAME}/${artifactNameWl}.${extension} &&  mv ${pathWl}/Deploy/${JOB_BASE_NAME}/${artifactNameWl}.${extension} ${pathWl}/DeploysHistory/${JOB_BASE_NAME}/${artifactNameWl}_`date +\"%Y-%m-%d-%Y_%H:%M\"`.${extension} || echo \"No se encontro artefacto para realizar backup\""

                    sshCommand remote: remote, command:"cp ${pathWl}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWl}.${extension} ${pathWl}/Deploy/${JOB_BASE_NAME}"
                    
                    //sshCommand remote: remote, command:"rm -rf ${pathWl}/DeploysTemp/${JOB_BASE_NAME}/${artifactNameWl}.${extension}"
                }
                unstable {
                    println "Stage Deploy <<<<<< unstable >>>>>>"
                    script{
                        statusCode='unstable';
                    }
                }
                failure {
                    println "Stage Deploy <<<<<< failure >>>>>>"
                
                    script{
                        if( statusCodeStop == 'success' && statusCodeUndeploy == 'success' ){

                            echo "2. desplegar de la carpeta deploy";
                            sshCommand remote: remote, command:"cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWl} -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -deploy -source ${pathWl}/Deploy/${JOB_BASE_NAME}/${artifactNameWl} -targets ${clusterWl} -usenonexclusivelock"
                            
                            //validar la necesidad de realizar el start
                            //echo "3. start a la aplicación";
                            //sshCommand remote: remote, command:"cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.Deployer -adminurl ${urlWl} -username ${WEBLOGIC_CREDENTIAL_USR} -password '${WEBLOGIC_CREDENTIAL_PSW}' -start -name ${artifactNameWl}"
                            
                        }else if( statusCodeStop == 'success' && statusCodeUndeploy != 'success' ){
                            echo "No se pudo desplegar verificar que el ambiente se encuentre estable con la version anterior";
                        
                        }else if( statusCodeStop != 'success'){
                            echo "No se pudo desplegar, por favor verificar por que no se encontro un artefacto inicial para restaurar";
                        }
                        
                        statusCode='failure';
                    }
                }
            }
                
        }

//        stage('smoke test') {
                // when { anyOf { branch 'develop'; branch 'stage'; branch 'master' } }
                // agent {
                //    label 'nodejenkinsjdk11' 
                // }  
//          steps {
//              sh 'docker run -t postman/newman run -h'
//              sh 'docker run -v ${WORKSPACE}:/etc/newman --workdir /etc/newman -t postman/newman run Collection.postman_collection.json --color off --disable-unicode'
//       }
//     }

        // stage('start cluster'){      
        //     agent {
        //         label 'master' 
        //     }
        //     environment {
        //         WEBLOGIC_CREDENTIAL = credentials("${idUserANDPassWl}")
        //     }  
        //     when { 
        //         branch 'develop'; branch 'stage'
        //         equals expected:true, actual:shutdownCluster 
        //     } 
        //     steps{
        //         //sshCommand remote: remote, sudo:true, command:"test -f ${pathWl}/DeploysTemp/${BRANCH_NAME} || sudo mkdir -p ${pathWl}/DeploysTemp/${BRANCH_NAME} && sudo chown -R wlogic12c:oinstall ${pathWl}/"                                
        //         sshCommand remote: remote, command:"mv /home/devops/applications/${projectName}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl} ${pathWl}/DeploysTemp/${BRANCH_NAME}"
        //         //sshCommand remote: remote, sudo:true, command:"chown  wlogic12c:oinstall ${pathWl}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}"
                
        //         sh """
        //             rm -rf startCluster.py
                    
        //             touch startCluster.py
        //             echo 'print("Conección con el servidor ${clusterWl}")' >> startCluster.py 
        //             echo 'connect("${WEBLOGIC_CREDENTIAL_USR}","'${WEBLOGIC_CREDENTIAL_PSW}'","${urlWl}")' >> startCluster.py
        //             echo 'print("deploy  app in ${clusterWl}")' >> startCluster.py 
        //             echo 'deploy("${artifactNameWl}", "${pathWl}/DeploysTemp/${BRANCH_NAME}/${artifactNameWl}", "${clusterWl}")' >> startCluster.py
        //             echo 'print("start: ${clusterWl}")' >> startCluster.py
        //             echo 'start("${clusterWl}")' >> startCluster.py
        //             echo 'print("state: ${clusterWl}")' >> startCluster.py
        //             echo 'state("${clusterWl}")' >> startCluster.py
        //         """

        //         sshPut remote: remote, from: "startCluster.py", into: "/home/devops/applications/${projectName}/DeploysTemp/"

        //         sshCommand remote: remote, command: "cd ${domainWl} && . ./setDomainEnv.sh ENV && java weblogic.WLST  /home/devops/applications/${projectName}/DeploysTemp/startCluster.py"
                
        //         sshCommand remote: remote, command: "rm /home/devops/applications/${projectName}/DeploysTemp/startCluster.py"

        //         sh """
        //             rm -rf startCluster.py
        //         """
        //     }
        // } 
    }
    post {         
        always{
            echo "Enviar logs...";
            script{
               commit = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
            }
        }
        //Manejo de las execepciones con envio de notificacion por medio de slack  segun del status que coresponda.
        success{
            sh "echo success"
            script{
               if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                   slackSend channel: channelName, teamDomain: 'SegurosBolivar', tokenCredentialId: 'jenkins-slack-chanel', color: '#90FF33',
                   message: "La ejecución *${BUILD_DISPLAY_NAME}* del pipeline *${JOB_NAME}* finalizo con estado *SUCCESS*" +
                   "\n *Commit:* \n ${commit}" +
                   "\n *<${JOB_DISPLAY_URL}|Ver en Jenkins>*" + "\n" +
                   "\n *<${GIT_URL}|Ir al repositorio>*";
               }
            }
        }
        unstable {
            script{
                if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                    slackSend channel: channelName, teamDomain: 'SegurosBolivar', tokenCredentialId: 'jenkins-slack-chanel', color: '#FFA500', message: "El proyecto ${projectName} desplego en el ambiente ${BRANCH_NAME} \n finalizo con estado: unstable";
                }
            }
        }
        failure{
            sh "echo failure"
            script{
               if( "${BRANCH_NAME}" == "develop" || "${BRANCH_NAME}" == "stage" || "${BRANCH_NAME}" == "master" ){
                   slackSend channel: channelName, teamDomain: 'SegurosBolivar', tokenCredentialId: 'jenkins-slack-chanel', color: '#FF4233', 
                   message: "La ejecución *${BUILD_DISPLAY_NAME}* del pipeline *${JOB_NAME}* finalizo con estado *FAILURE*" +
                   "\n *Commit:* \n ${commit}" +
                   "\n *<${JOB_DISPLAY_URL}|Ver en Jenkins>*" + "\n" +
                   "\n *<${GIT_URL}|Ir al repositorio>*";
               }
            }
        }  
    }      
}